// Inset box shadows
@define-color highlight_color #fff;

// The default titlebar color
$titlebar-color: mix($SILVER_100, $SILVER_300, $weight: 30%);

// Text, images, and other foreground elements
$fg-color: $BLACK_500;

// Outset box shadow or border color on toplevel elements like windows, menus, popovers
$toplevel-border-color: rgba(0, 0, 0, 0.2);

@if $color-scheme == "dark" {
    @define-color highlight_color #{'alpha(' + mix(white, $accent_color_100) + ', 0.2)'};

    $titlebar-color: mix(mix($BLACK_500, $BLACK_700, 70%), $accent_color_900, $weight: 99%);

    $fg-color: #fff;

    $toplevel-border-color: rgba(0, 0, 0, 0.6);
}

// The primary brand color used for titlebars
@define-color color_primary #{$titlebar-color};

@function bg-color($level) {
    @if $color-scheme == "light" {
        // Views and inputs
        @if $level == 1 {
            @return #fff;
        // Background
        } @else if $level == 2 {
            @return $SILVER_100;
        // Sidebars and inline toolbars
        } @else if $level == 3 {
            @return mix($SILVER_100, $SILVER_300, $weight: 75%);
        // Titlebars and toolbars
        } @else if $level == 4 {
            @return $titlebar-color;
        }
    } @else if $color-scheme == "dark" {
        @if $level == 1 {
            @return mix($BLACK_300, $accent_color_900, 99%);
        } @else if $level == 2 {
            @return mix($BLACK_500, $accent_color_900, 99%);
        } @else if $level == 3 {
            @return mix(mix($BLACK_500, $BLACK_700, 75%), $accent_color_700, 99%);
        } @else if $level == 4 {
            @return $titlebar-color;
        }
    }
}

@function shadow($level) {
    @if $color-scheme == "light" {
        @if $level == 1 {
            @return
                0 1px 3px rgba(0, 0, 0, 0.12),
                0 1px 2px rgba(0, 0, 0, 0.24),
                0 14px 28px transparent;
        } @else if $level == 2 {
            @return
                0 3px 4px rgba(0, 0, 0, 0.15),
                0 3px 3px -3px rgba(0, 0, 0, 0.35),
                0 14px 28px transparent;
        } @else if $level == 3 {
            @return
                0 8px 5px 1px rgba(0, 0, 0, 0.10),
                0 3px 8px 2px rgba(0, 0, 0, 0.10),
                0 5px 5px -3px rgba(0, 0, 0, 0.4),
                0 14px 28px transparent;
        } @else if $level == 4 {
            @return
                0 14px 28px rgba(0, 0, 0, 0.35),
                0 10px 10px rgba(0, 0, 0, 0.22);
        }
    } @else if $color-scheme == "dark" {
        @if $level == 1 {
            @return
                0 1px 3px rgba(0, 0, 0, 0.42),
                0 1px 2px rgba(0, 0, 0, 0.44),
                0 14px 28px transparent;
        } @else if $level == 2 {
            @return
                0 3px 4px rgba(0, 0, 0, 0.25),
                0 3px 3px -3px rgba(0, 0, 0, 0.45),
                0 14px 28px transparent;
        } @else if $level == 3 {
            @return
                0 8px 5px 1px rgba(0, 0, 0, 0.10),
                0 3px 8px 2px rgba(0, 0, 0, 0.10),
                0 5px 5px -3px rgba(0, 0, 0, 0.4),
                0 14px 28px transparent;
        } @else if $level == 4 {
            @return
                0 14px 28px rgba(0, 0, 0, 0.45),
                0 10px 10px rgba(0, 0, 0, 0.32);
        }
    }
}

@function inset-shadow($state: "") {
    @if $state == "disabled" {
        @return
            0 1px 0 0 #{'alpha(@highlight_color, 0.3)'},
            inset 0 1px 1px rgba(0, 0, 0, 0.05);
    }

    @return
        0 1px 0 0 #{'alpha(@highlight_color, 0.3)'},
        inset 0 1px 1px rgba(0, 0, 0, 0.05),
        inset 0 0 1px 1px rgba(0, 0, 0, 0.05);
}

@function outset-highlight($sides: "full") {
    $highlight:
        inset 1px 0 0 0 #{'alpha(@highlight_color, 0.07)'},
        inset -1px 0 0 0 #{'alpha(@highlight_color, 0.07)'};

    @if $sides == "top" or $sides == "full" {
        $highlight:
            inset 0 1px 0 0 #{'alpha(@highlight_color, 0.3)'},
            $highlight;
    }

    @if $sides == "bottom" or $sides == "full" {
        $highlight:
            inset 0 -1px 0 0 #{'alpha(@highlight_color, 0.2)'},
            $highlight;
    }

    @return $highlight;
}

@function outset-shadow($level) {
    @if $level == 1 {
        @return 0 1px 1px rgba(0, 0, 0, 0.05);
    } @else if $level == 2 {
        @return
            0 1px 1px rgba(0, 0, 0, 0.07),
            0 1px 2px rgba(0, 0, 0, 0.08);
    } @else if $level == 3 {
        @return
            0 1px 3px rgba(0, 0, 0, 0.12),
            0 1px 2px rgba(0, 0, 0, 0.24);
    }
}

@function rem($pixels, $text-size: 9pt) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }

    @if (unitless($text-size)) {
        $text-size: $text-size * 1px;
    }

    // Workaround GTK clamping instead of rounding up
    @return ($pixels / $text-size * 1rem) + 0.000000001rem;
}

// Background for elements with outset style like headerbars, buttons, checkboxes, etc
%outset-background {
    background-image:
        linear-gradient(
            to bottom,
            #{'alpha(@highlight_color, 0.2)'},
            rgba(255, 255, 255, 0)
        );

    &:backdrop {
        background-image:
            linear-gradient(
                to bottom,
                #{'alpha(@highlight_color, 0.35)'},
                #{'alpha(@highlight_color, 0.3)'}
            );
    }
}

%outset-background-vertical {
    background-image:
        linear-gradient(
            to right,
            #{'alpha(@highlight_color, 0.2)'},
            rgba(255, 255, 255, 0)
        );

    &:backdrop {
        background-image:
            linear-gradient(
                to right,
                #{'alpha(@highlight_color, 0.35)'},
                #{'alpha(@highlight_color, 0.3)'}
            );
    }
}

@import '_animate.scss';
@import '_typography.scss';
// Can't just use `@import 'widgets';` because of sass version in repos
@import 'widgets/_index.scss';
